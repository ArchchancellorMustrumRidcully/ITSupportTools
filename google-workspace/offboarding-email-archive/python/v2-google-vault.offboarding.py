#!/usr/bin/env python3
from urllib import request
import requests
import json
import sys
from requests.utils import requote_uri
from urllib.parse import urlencode, quote_plus
import urllib
import shutil
import time
import os
import mimetypes

client_Id=sys.argv[1]
client_Secret=sys.argv[2]
refresh_Token=sys.argv[3]

userList=[""]
adminUsers=[""]
rootFolderId=""

matter={
	"user": "",
	"matterId": "",
	"savedQueryId": "",
	"exportId": ""
}

def generate_Google_Access_Token(client_Id,client_Secret,refresh_Token):

        url = "https://www.googleapis.com/oauth2/v4/token"

        headers = {
        "Accept" : "application/json",
        }

        body = {
        "client_id": client_Id,
        "client_secret": client_Secret,
        "refresh_token": refresh_Token,
        "grant_type": "refresh_token"
        }

        response = requests.post(url, headers=headers, json=body)
        response.raise_for_status()

        apiResponse = response.json()
        access_Token = apiResponse["access_token"]
        return access_Token

def generate_Matter(user,matter):

        url = "https://vault.googleapis.com/v1/matters/"

        body = {           
        "state": "OPEN",
        "description": "Generated by Python",
        "name": user + "'s archive"
        }

        response = session.post(url, json=body)
        response.raise_for_status()

        apiResponse = response.json()
        matterId=apiResponse["matterId"]

        matter["user"]=user
        matter["matterId"]=matterId
        return matter

def generate_Search_Query(user,matter):

        user=matter["user"]
        matterId=matter["matterId"]

        url = f"https://vault.googleapis.com/v1/matters/{matterId}/savedQueries"

        body = {
            "displayName": user + "'s email search query",
            "query": {
                "corpus": "MAIL",
                "dataScope": "ALL_DATA",
                "searchMethod": "ACCOUNT",
                "accountInfo": { "emails": [user]},
                "mailOptions": {"excludeDrafts" : "false"},
                "timeZone": "Atlantic/Canary",
                "method": "ACCOUNT"
        }}

        response = session.post(url, json=body)
        response.raise_for_status()

        apiResponse = response.json()
        savedQueryId=apiResponse["savedQueryId"]

        matter["savedQueryId"]=savedQueryId
        return matter

def generate_Export(user,matter):

        user=matter["user"]
        matterId=matter["matterId"]

        url = f"https://vault.googleapis.com/v1/matters/{matterId}/exports"

        body = {
                "name": user + "'s Export",
                "query": {
                    "corpus": "MAIL",
                    "dataScope": "ALL_DATA",
                    "searchMethod": "ACCOUNT",
                    "accountInfo": { "emails": [user]},
                    "mailOptions": {"excludeDrafts" : "false"},
                    "timeZone": "Atlantic/Canary",
                    "method": "Account",
                },
                "exportOptions": {
                    "mailOptions": {
                        "exportFormat": "MBOX",
                        "showConfidentialModeContent": "true"
                    },
                    "region": "any"
                    }
                }
        
        response = session.post(url, json=body)
        response.raise_for_status()

        apiResponse=response.json()
        exportId=apiResponse["id"]

        matter["exportId"]=exportId
        return matter

def set_Vault_Permissions(admin,matter):

        matterId=matter["matterId"]

        url = f"https://vault.googleapis.com/v1/matters/{matterId}:addPermissions"

        body = {
            "matterPermission": 
        {
            "role": "COLLABORATOR",
            "accountId": admin
        },
            "sendEmails": "false",
            "ccMe": "false"
        }

        response = session.post(url, json=body)
        response.raise_for_status()

        apiResponse=response.json()
        return apiResponse

def get_Export_Status(matter):

        matterId=matter["matterId"]   
        exportId=matter["exportId"]

        url = f"https://vault.googleapis.com/v1/matters/{matterId}/exports/"
        
        response = session.get(url)
        response.raise_for_status()

        apiResponse=response.json()
        status=apiResponse["exports"][0]["status"]

        while status == "IN_PROGRESS":

                response = session.get(url)
                response.raise_for_status()

                apiResponse=response.json()
                status=apiResponse["exports"][0]["status"]
                print("Export is not completed yet. Going to sleep for 30 seconds, then I will check the export status again")
                time.sleep(30)

        if status == "COMPLETED":

            cloudStorageSink=apiResponse["exports"][0]["cloudStorageSink"]["files"]

        return cloudStorageSink

def download_Export(objectName,bucketName,size,md5Hash,user):
        
        encoded=urllib.parse.quote(objectName,safe='')
        download_url=f"https://storage.googleapis.com/storage/v1/b/{bucketName}/o/{encoded}?alt=media"
        directory=user
        parent_dir="downloads"
        path = os.path.join(parent_dir, directory)
        os.makedirs(path, exist_ok=True)
        last = objectName.split("/")[-1]
        fileName=(path+"/"+last)

        with session.get(download_url, stream=True) as r:
                PreparedResponse=requests.get
                with open(fileName, 'wb') as f:
                    shutil.copyfileobj(r.raw, f, length=16*1024*1024)
                    r.raise_for_status()

        return fileName

def create_Folder(user,rootFolderId,access_Token):
            
        folder_metadata = {
        'name' : user,
        'parents' : [rootFolderId],
        'mimeType' : 'application/vnd.google-apps.folder'
        }

        url="https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&supportsAllDrives=true"

        headers={
            "Authorization": "Bearer " + access_Token
        }

        files = {
            'data': ('metadata', json.dumps(folder_metadata), "application/json; charset=UTF-8"),
        }

        response = requests.post(url=url, headers=headers, files=files)
        response.raise_for_status()

        apiResponse=response.json()
        print(apiResponse)
        archiveUserFolderId=apiResponse["id"]
        return archiveUserFolderId

def upload_Matter(user,localFileName,archiveUserFolderId,access_Token):

        absoluteFileName=localFileName.split("/")[-1]

        file_metadata={

            'name': absoluteFileName, 
            "parents": 
                [ archiveUserFolderId ]

            }

        url="https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&supportsAllDrives=true"

        headers={
            "Authorization": "Bearer " + access_Token
        }

        with open(localFileName, 'rb') as file_to_upload:
            type=mimetypes.guess_type(localFileName,strict=True)
            files = {
            'data': ('metadata', json.dumps(file_metadata), "application/json; charset=UTF-8"),
            'file': ('mimeType', file_to_upload)
                }
            response = requests.post(url=url, headers=headers, files=files)
            response.raise_for_status()

        apiResponse=response.json()
        print(apiResponse)
        archiveUserFileId=apiResponse["id"]
        return archiveUserFileId

def delete_localFolderFile(localFileName):

        os.remove(localFileName)
        print(localFileName+" File Deleted")

def notify_User(archiveUserFolderId):

        url=f"https://drive.google.com/drive/folders/{archiveUserFolderId}"
        return url

for user in userList:

    access_Token=generate_Google_Access_Token(client_Id,client_Secret,refresh_Token)

    headers = {
        "Accept" : "application/json",
        "Content-Type" : "application/json",
        "Authorization": "Bearer " + access_Token
    }

    session = requests.Session()
    session.headers.update(headers)

    matterStateMatterInfo=generate_Matter(user,matter)

    matterStateSavedQueryId=generate_Search_Query(user,matter)

    matterStateExportId=generate_Export(user,matter)

    archiveUserFolderId=create_Folder(user,rootFolderId,access_Token)
    
    exportInfo=get_Export_Status(matterStateExportId)

    for each in exportInfo:

        objectName=each["objectName"]
        bucketName=each["bucketName"]
        size=each["size"]
        md5Hash=each["md5Hash"]
	
	access_Token=generate_Google_Access_Token(client_Id,client_Secret,refresh_Token)
	
	headers = {
		"Accept" : "application/json",
		"Content-Type" : "application/json",
		"Authorization": "Bearer " + access_Token
    	}
		
	session.headers.update(headers)

        localFileName=download_Export(objectName,bucketName,size,md5Hash,user)

        uploaded_File=upload_Matter(user,localFileName,archiveUserFolderId,access_Token)

        delete_localFolderFile(localFileName)

    print("Export uploaded to "+notify_User(archiveUserFolderId))

    print(matter)

    for adminId in adminUsers:

        matterStateAdminPermissions=set_Vault_Permissions(adminId,matter)
